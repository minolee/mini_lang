PROGRAM : [DECLARATION]*[MAIN]?

DECLARATION : [FUNCTION_DECLARATION]
FUNCTION_DECLARATION : [TYPE]<ID><LPARENTHESE>[PARAM_FORM]*<RPARENTHESE>[COMPLEX_STATEMENT]

#Statements
STATEMENT_LIST : [STATEMENT]*
COMPLEX_STATEMENT : <LBRACE>[STATEMENT_LIST]<RBRACE>
STATEMENT : [IF_STATEMENT]|[WHILE_STATEMENT]|[DO_WHILE_STATEMENT]|[FOR_STATEMENT]|[ASSIGN_STATEMENT]|[VAR_DECLARATION]|[COMPLEX_STATEMENT]|<SEMICOLON>
IF_STATEMENT : <IF><LPARENTHESE>[EXPRESSION]<RPARENTHESE>[STATEMENT][ELSE_FORM]?
WHILE_STATEMENT : <WHILE><LPARENTHESE>[EXPRESSION]<RPARENTHESE>[STATEMENT]
DO_WHILE_STATEMENT : <DO>[STATEMENT]<WHILE><LPARENTHESE>[EXPRESSION]<RPARENTHESE><SEMICOLON>
FOR_STATEMENT : <FOR><LPARENTHESE>[ASSIGN_STATEMENT]<SEMICOLON>[EXPRESSION]<SEMICOLON>[EXPRESSION]<RPARENTHESE>[STATEMENT]
ASSIGN_STATEMENT : <ID>([<SINGLE_EQ>|[UNARY_OP])[EXPRESSION]
SWITCH_STATEMENT : <SWITCH><LPARENTHESE><[EXPRESSION]<RPARENTHESE><LBRACE>[CASE_LIST]?<RBRACE>
CASE_LIST : [CASE]*[DEFAULT_CASE]?
CASE : <CASE>[EXPRESSION]<COLON><STATEMENT_LIST>
DEFAULT_CASE : <DEFAULT><COLON><STATEMENT_LIST>
RETURN_STATEMENT : <RETURN>[EXPRESSION]?

#Forms - avoid (xy)*
PARAM_FORM : [TYPE][ID]
ELSE_FORM : <ELSE>[STATEMENT]

#type, unary operation
TYPE : <INT>|<FLOAT>|<STRING>
UNARY_OP : <UNARY_PLUS>|<UNARY_MINUS>|<UNARY_MULTIPLY>|<UNARY_DIVIDE>|<UNARY_OR>|<UNARY_AND>|<UNARY_XOR>

#Expressions - http://ko.cppreference.com/w/cpp/language/operator_precedence
EXPRESSION : [EXPR0]
EXPR0 : [EXPR1][EXPR0_]?
EXPR0_ : <OR>[EXPR1][EXPR0_]?
EXPR1 : [EXPR2][EXPR1_]?
EXPR1_ : <AND>[EXPR2][EXPR1_]?
EXPR2 : [EXPR3][EXPR2_]?
EXPR2_ : <BIT_OR>[EXPR3][EXPR2_]?
EXPR3 : [EXPR4][EXPR3_]?
EXPR3_ : <BIT_XOR>[EXPR4][EXPR3_]?
EXPR4 : [EXPR5][EXPR4_]?
EXPR4_ : <BIT_AND>[EXPR5][EXPR4_]?
EXPR5 : [EXPR6][EXPR5_]?
EXPR5_ : (<EQ>|<NE>)[EXPR6][EXPR5_]?
EXPR6 : [EXPR7][EXPR6_]?
EXPR6_ : (<GT>|<LT>|<GTE>|<LTE>)[EXPR7][EXPR6_]?
EXPR7 : [EXPR8][EXPR7_]?
EXPR7_ : (<LSHIFT>|<RSHIFT>)[EXPR8][EXPR7_]?
EXPR8 : [EXPR9][EXPR8_]?
EXPR8_ : (<PLUS>|<MINUS>)[EXPR9][EXPR8_]?
EXPR9 : [EXPR10][EXPR9_]?
EXPR9_ : (<MULTIPLY>|<DIVIDE>|<REMAINDER>)[EXPR10][EXPR9_]?
EXPR10 : <MINUS>?[BASE_CASE]
BASE_CASE : <LPARENTHESE>[EXPR]<RPARENTHESE>|[ID_EXPR]|<NUMBER>

#ID Expressions
ID_EXPR : <ID>[ID_EXTRA]?
ID_EXTRA : [ID_CALL]|[ID_ARRAY]
ID_CALL : <LPARENTHSE>[PARAM]?<RPARENTHESE>
PARAM : [EXPRESSION][ADDITIONAL_PARAM]*
ADDITIONAL_PARAM : <COMMA>[EXPRESSION]
ID_ARRAY : <LSQBRACKET>[EXPRESSION]<RSQBRACKET>

#Expr forms
BRACKET_EXPR : <LSQBRACKET>[EXPRESSION]<RSQBRACKET>